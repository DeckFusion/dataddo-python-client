# coding: utf-8

"""
    Dataddo Headless BETA API

    Dataddo Headless BETA API

    The version of the OpenAPI document: 1.0.0-beta.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.operation_request_filter import OperationRequestFilter
from openapi_client.models.operation_request_format import OperationRequestFormat
from openapi_client.models.operation_request_inner_join import OperationRequestInnerJoin
from openapi_client.models.operation_request_left_join import OperationRequestLeftJoin
from openapi_client.models.operation_request_limit import OperationRequestLimit
from openapi_client.models.operation_request_sort import OperationRequestSort
from openapi_client.models.operation_request_union import OperationRequestUnion
from openapi_client.models.operation_request_view import OperationRequestView
from typing import Optional, Set
from typing_extensions import Self

class OperationRequest(BaseModel):
    """
    OperationRequest
    """ # noqa: E501
    name: Optional[StrictStr] = None
    output: Optional[StrictStr] = None
    union: Optional[OperationRequestUnion] = None
    left_join: Optional[OperationRequestLeftJoin] = None
    inner_join: Optional[OperationRequestInnerJoin] = None
    view: Optional[OperationRequestView] = None
    limit: Optional[OperationRequestLimit] = None
    sort: Optional[OperationRequestSort] = None
    filter: Optional[OperationRequestFilter] = None
    format: Optional[OperationRequestFormat] = None
    __properties: ClassVar[List[str]] = ["name", "output", "union", "left_join", "inner_join", "view", "limit", "sort", "filter", "format"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of union
        if self.union:
            _dict['union'] = self.union.to_dict()
        # override the default output from pydantic by calling `to_dict()` of left_join
        if self.left_join:
            _dict['left_join'] = self.left_join.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inner_join
        if self.inner_join:
            _dict['inner_join'] = self.inner_join.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['view'] = self.view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limit
        if self.limit:
            _dict['limit'] = self.limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of format
        if self.format:
            _dict['format'] = self.format.to_dict()
        # set to None if union (nullable) is None
        # and model_fields_set contains the field
        if self.union is None and "union" in self.model_fields_set:
            _dict['union'] = None

        # set to None if left_join (nullable) is None
        # and model_fields_set contains the field
        if self.left_join is None and "left_join" in self.model_fields_set:
            _dict['left_join'] = None

        # set to None if inner_join (nullable) is None
        # and model_fields_set contains the field
        if self.inner_join is None and "inner_join" in self.model_fields_set:
            _dict['inner_join'] = None

        # set to None if view (nullable) is None
        # and model_fields_set contains the field
        if self.view is None and "view" in self.model_fields_set:
            _dict['view'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if sort (nullable) is None
        # and model_fields_set contains the field
        if self.sort is None and "sort" in self.model_fields_set:
            _dict['sort'] = None

        # set to None if filter (nullable) is None
        # and model_fields_set contains the field
        if self.filter is None and "filter" in self.model_fields_set:
            _dict['filter'] = None

        # set to None if format (nullable) is None
        # and model_fields_set contains the field
        if self.format is None and "format" in self.model_fields_set:
            _dict['format'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "output": obj.get("output"),
            "union": OperationRequestUnion.from_dict(obj["union"]) if obj.get("union") is not None else None,
            "left_join": OperationRequestLeftJoin.from_dict(obj["left_join"]) if obj.get("left_join") is not None else None,
            "inner_join": OperationRequestInnerJoin.from_dict(obj["inner_join"]) if obj.get("inner_join") is not None else None,
            "view": OperationRequestView.from_dict(obj["view"]) if obj.get("view") is not None else None,
            "limit": OperationRequestLimit.from_dict(obj["limit"]) if obj.get("limit") is not None else None,
            "sort": OperationRequestSort.from_dict(obj["sort"]) if obj.get("sort") is not None else None,
            "filter": OperationRequestFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "format": OperationRequestFormat.from_dict(obj["format"]) if obj.get("format") is not None else None
        })
        return _obj


