# coding: utf-8

"""
    Dataddo Headless BETA API

    Dataddo Headless BETA API

    The version of the OpenAPI document: 1.0.0-beta.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateScheduleRequest(BaseModel):
    """
    UpdateScheduleRequest
    """ # noqa: E501
    sync_frequency: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = Field(default=None, description="Timezone schedule definition")
    minute: Optional[StrictStr] = Field(default=None, description="Hour schedule definition")
    hour: Optional[StrictStr] = Field(default=None, description="Hour schedule definition")
    day_of_month: Optional[StrictStr] = Field(default=None, description="Day of month schedule definition", alias="dayOfMonth")
    month: Optional[StrictStr] = Field(default=None, description="Month schedule definition")
    day_of_week: Optional[StrictStr] = Field(default=None, description="Day of week schedule definition", alias="dayOfWeek")
    __properties: ClassVar[List[str]] = ["sync_frequency", "timezone", "minute", "hour", "dayOfMonth", "month", "dayOfWeek"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateScheduleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if minute (nullable) is None
        # and model_fields_set contains the field
        if self.minute is None and "minute" in self.model_fields_set:
            _dict['minute'] = None

        # set to None if hour (nullable) is None
        # and model_fields_set contains the field
        if self.hour is None and "hour" in self.model_fields_set:
            _dict['hour'] = None

        # set to None if day_of_month (nullable) is None
        # and model_fields_set contains the field
        if self.day_of_month is None and "day_of_month" in self.model_fields_set:
            _dict['dayOfMonth'] = None

        # set to None if month (nullable) is None
        # and model_fields_set contains the field
        if self.month is None and "month" in self.model_fields_set:
            _dict['month'] = None

        # set to None if day_of_week (nullable) is None
        # and model_fields_set contains the field
        if self.day_of_week is None and "day_of_week" in self.model_fields_set:
            _dict['dayOfWeek'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateScheduleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sync_frequency": obj.get("sync_frequency"),
            "timezone": obj.get("timezone"),
            "minute": obj.get("minute"),
            "hour": obj.get("hour"),
            "dayOfMonth": obj.get("dayOfMonth"),
            "month": obj.get("month"),
            "dayOfWeek": obj.get("dayOfWeek")
        })
        return _obj


