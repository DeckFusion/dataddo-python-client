# coding: utf-8

"""
    Dataddo Headless BETA API

    Dataddo Headless BETA API

    The version of the OpenAPI document: 1.0.0-beta.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_aurora_trait_ssh_config import AwsAuroraTraitSshConfig
from typing import Optional, Set
from typing_extensions import Self

class AwsAuroraUserAuth(BaseModel):
    """
    AwsAuroraUserAuth
    """ # noqa: E501
    id: Optional[StrictInt] = None
    customer_id: Optional[StrictStr] = None
    created_at: Optional[StrictInt] = None
    updated_at: Optional[StrictInt] = None
    label: Optional[StrictStr] = None
    object_id: Optional[StrictStr] = Field(default=None, alias="objectId")
    status: Optional[StrictBool] = None
    status_detail: Optional[StrictStr] = None
    service_type: Optional[StrictStr] = None
    last_use: Optional[datetime] = None
    identifier: Optional[StrictStr] = None
    hash: Optional[StrictStr] = None
    host: Optional[StrictStr] = None
    port: Optional[StrictInt] = None
    username: Optional[StrictStr] = None
    database: Optional[StrictStr] = None
    ssh_config: Optional[AwsAuroraTraitSshConfig] = Field(default=None, alias="sshConfig")
    ssl: Optional[StrictStr] = None
    tls: Optional[StrictStr] = None
    extra_params: Optional[Dict[str, StrictStr]] = Field(default=None, description="string>", alias="extraParams")
    __properties: ClassVar[List[str]] = ["id", "customer_id", "created_at", "updated_at", "label", "objectId", "status", "status_detail", "service_type", "last_use", "identifier", "hash", "host", "port", "username", "database", "sshConfig", "ssl", "tls", "extraParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsAuroraUserAuth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ssh_config
        if self.ssh_config:
            _dict['sshConfig'] = self.ssh_config.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if last_use (nullable) is None
        # and model_fields_set contains the field
        if self.last_use is None and "last_use" in self.model_fields_set:
            _dict['last_use'] = None

        # set to None if ssh_config (nullable) is None
        # and model_fields_set contains the field
        if self.ssh_config is None and "ssh_config" in self.model_fields_set:
            _dict['sshConfig'] = None

        # set to None if ssl (nullable) is None
        # and model_fields_set contains the field
        if self.ssl is None and "ssl" in self.model_fields_set:
            _dict['ssl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsAuroraUserAuth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "customer_id": obj.get("customer_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "label": obj.get("label"),
            "objectId": obj.get("objectId"),
            "status": obj.get("status"),
            "status_detail": obj.get("status_detail"),
            "service_type": obj.get("service_type"),
            "last_use": obj.get("last_use"),
            "identifier": obj.get("identifier"),
            "hash": obj.get("hash"),
            "host": obj.get("host"),
            "port": obj.get("port"),
            "username": obj.get("username"),
            "database": obj.get("database"),
            "sshConfig": AwsAuroraTraitSshConfig.from_dict(obj["sshConfig"]) if obj.get("sshConfig") is not None else None,
            "ssl": obj.get("ssl"),
            "tls": obj.get("tls"),
            "extraParams": obj.get("extraParams")
        })
        return _obj


